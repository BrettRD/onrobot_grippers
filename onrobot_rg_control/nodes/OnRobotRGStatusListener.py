#!/usr/bin/env python3

import rospy
from onrobot_rg_msgs.msg import OnRobotRGInput


def printStatus(status):
    """Print the status string generated by the statusInterpreter function."""

    rospy.loginfo(statusInterpreter(status))


def OnRobotRGStatusListener():
    """Initialize the node and subscribe to the OnRobotRGInput topic."""

    rospy.init_node('OnRobotRGStatusListener')
    rospy.Subscriber("OnRobotRGInput", OnRobotRGInput, printStatus)
    rospy.spin()


def statusInterpreter(status):
    """Generate a string according to the current value
       of the status variables.
    """

    output = '\n-----\nOnRobot RG status interpreter\n-----\n'

    # gFOF
    output += 'gFOF = ' + str(status.gFOF) + ': '
    output += 'Current fingertip offset: ' + str(status.gFOF / 10.0) + ' mm\n'

    # gGWD
    output += 'gGWD = ' + str(status.gGWD) + ': '
    output += 'Current width between the gripper fingers (w/o offset): ' + \
              str(status.gGWD / 10.0) + ' mm\n'

    # gSTA
    output += 'gSTA = ' + str(status.gSTA) + ': '
    gSTA16bit = format(status.gSTA, '016b')
    output += 'gSTA (16 bit) = ' + gSTA16bit
    if int(gSTA16bit[-1]):
        output += 'Any motion is not ongoing so new commands are accepted.\n'
    if int(gSTA16bit[-2]):
        output += 'An internal- or external grip is detected.\n'
    if int(gSTA16bit[-3]):
        output += 'Safety switch 1 is pushed.\n'
    if int(gSTA16bit[-4]):
        output += 'Safety circuit 1 is activated so the gripper cannot move.\n'
    if int(gSTA16bit[-5]):
        output += 'Safety switch 2 is pushed.\n'
    if int(gSTA16bit[-6]):
        output += 'Safety circuit 2 is activated so the gripper cannot move.\n'
    if int(gSTA16bit[-7]):
        output += 'Any of the safety switch is pushed.\n'

    # gWDF
    output += 'gWDF = ' + str(status.gWDF) + ': '
    output += 'Current width between the gripper fingers (w offset): ' + \
              str(status.gWDF / 10.0) + ' mm\n'

    return output


if __name__ == '__main__':
    OnRobotRGStatusListener()
